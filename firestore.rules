rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* =====================================================
       ðŸ”¹ Helper Functions
       ===================================================== */
    function isSignedIn() {
      return request.auth != null;
    }

    function eventDoc(eventId) {
      return get(/databases/$(database)/documents/events/$(eventId));
    }

    function isHost(eventId) {
      return isSignedIn() && eventDoc(eventId).data.hostUid == request.auth.uid;
    }

    /* =====================================================
       ðŸ”¹ USERS + Subcollections (Host Mirrors)
       ===================================================== */
    match /users/{userId} {
      // User can read & write their own profile
      allow read, create, update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if false;

      // ðŸ”¹ Hosted Events mirror (used for MyEventsPage)
      match /hostedEvents/{eventId} {
        allow read, write: if isSignedIn() && request.auth.uid == userId;
        allow delete: if false;
      }

      // Future expansion (optional mirrors)
      match /judgeEvents/{eventId} {
        allow read, write: if isSignedIn() && request.auth.uid == userId;
      }

      match /startupEvents/{eventId} {
        allow read, write: if isSignedIn() && request.auth.uid == userId;
      }
    }

    /* =====================================================
       ðŸ”¹ EVENTS + Subcollections
       ===================================================== */
    match /events/{eventId} {
      // Hosts can fully manage their own events
      allow get, update, delete: if isHost(eventId);

      // Signed-in host can create their own event
      allow create: if isSignedIn() &&
                    request.resource.data.hostUid == request.auth.uid;

      // ðŸ”¹ General read rule â€” allow signed-in users to view events,
      // but only if they are the host or itâ€™s a public event
      allow read: if isSignedIn() &&
                  (resource.data.hostUid == request.auth.uid ||
                   (resource.data.isPublic == true));

      /* ---- Event Startups ---- */
      match /startups/{startupId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isHost(eventId);
      }

      /* ---- Event Judges ---- */
      match /judges/{judgeId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isHost(eventId);
      }

      /* ---- Event Investors ---- */
      match /investors/{investorId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isHost(eventId);
      }

      /* ---- Event Ratings ---- */
      match /ratings/{ratingId} {
        allow read: if isSignedIn();
        allow create, update: if isSignedIn();
      }
    }

    /* =====================================================
       ðŸ”¹ GLOBAL STARTUPS (root-level)
       ===================================================== */
    match /startups/{startupId} {
      allow read: if true;  // public for now
      allow create: if isSignedIn() &&
                    request.auth.uid == request.resource.data.createdBy;
      allow update, delete: if isSignedIn() &&
                            request.auth.uid in resource.data.owners;
    }


// TEMPORARY â€” test only
match /users/{userId}/hostedEvents/{eventId} {
  allow read, write: if true;
}



    /* =====================================================
       ðŸ”¹ Catch-all: Deny everything else
       ===================================================== */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
